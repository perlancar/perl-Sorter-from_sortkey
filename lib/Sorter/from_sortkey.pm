package Sorter::from_sortkey;

use 5.010001;
use strict 'subs', 'vars';
use warnings;

# AUTHORITY
# DATE
# DIST
# VERSION

sub meta {
    return +{
        v => 1,
        args => {
            sortkey => {schema=>'perl::sortkey::modname_with_optional_args*', req=>1},
            reverse => {schema => 'bool*'},
            ci => {schema => 'bool*'},
        },
    };
}

sub gen_sorter {
    my %args = @_;

    my $sortkey = $args{sortkey} or die "Please specify sortkey";
    my $reverse = $args{reverse};
    my $ci = $args{ci};

    require Module::Load::Util;

    my ($mod, $args) = Module::Load::Util::_normalize_module_with_optional_args($sortkey);
    $mod = Module::Load::Util::_load_module({ns_prefix=>"SortKey"}, $mod);
    my $is_num = $mod =~ /\ASortKey::Num::/ ? 1:0;
    my $keygen = &{"$mod\::gen_keygen"}(@$args);

    sub {
        my @records = map {
            my $key = $args{ci} ? lc($keygen->($_)) : $keygen->($_);
            [$_, $key];
        } @_;

        map { $_->[0] } sort { ($is_num ? ($a->[1] <=> $b->[1]) : ($a->[1] cmp $b->[1])) * ($reverse ? -1:1) } @records;
    };
}

1;
# ABSTRACT: Sort by keys generated by a SortKey:: module

=for Pod::Coverage ^(meta|gen_comparer)$

=head1 SYNOPSIS

 use Sorter::from_sortkey;

 my $sorter = Sorter::from_sortkey::gen_sorter(sortkey => "Num::similarity,string,foo");
 my @sorted = $sorter->("food", "foolish", "foo", "bar");
 # => ("foo","food","bar","foolish")


=head1 DESCRIPTION


=head1 SEE ALSO

L<SortKey>

=cut
